// --- App.tsx --- (Upgraded with Weekly Reflection + Memory Panel)

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import WhisperRecorder from './components/WhisperRecorder';
import MemoryDashboard from './components/MemoryDashboard';

interface BotStats {
  level: number;
  stage: string;
  wordsLearned: number;
}

interface Message {
  sender: 'user' | 'bot';
  text: string;
  time: string;
}

const App = () => {
  const [botStats, setBotStats] = useState<BotStats | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [weeklySummary, setWeeklySummary] = useState<string>('');
  const [showReflection, setShowReflection] = useState(false);
  const [showMemory, setShowMemory] = useState(false);

  useEffect(() => {
    axios.get('/api/stats?userId=1')
      .then(res => setBotStats(res.data))
      .catch(() => setBotStats({ level: 1, stage: 'Infant', wordsLearned: 0 }));

    axios.get('/api/weekly-summary?userId=1')
      .then(res => setWeeklySummary(res.data.summary))
      .catch(() => setWeeklySummary('No reflections available yet.'));  
  }, []);

  const sendMessage = async () => {
    if (!input.trim()) return;
    const newMessage: Message = {
      sender: 'user',
      text: input,
      time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
    };
    setMessages(prev => [...prev, newMessage]);
    setInput('');
    setLoading(true);
    try {
      const res = await axios.post('/api/chat', { message: newMessage.text, userId: 1 });
      setMessages(prev => [...prev, {
        sender: 'bot',
        text: res.data.response,
        time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
      }]);
    } catch (err) {
      console.error('Chat failed', err);
    }
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white font-sans flex flex-col">
      {/* Header */}
      <div className="p-4 bg-gray-800 shadow flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">ðŸªž Mirror Bot</h1>
          <p className="text-sm text-gray-300">AI companion that learns and speaks</p>
        </div>
        {botStats && (
          <div className="text-right">
            <p className="text-lg font-semibold">Level {botStats.level} â€¢ {botStats.stage}</p>
            <p className="text-xs text-gray-400">{botStats.wordsLearned} words learned</p>
          </div>
        )}
      </div>

      {/* Chat History */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((msg, idx) => (
          <div
            key={idx}
            className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <div className={`rounded-lg p-3 max-w-[70%] ${msg.sender === 'user' ? 'bg-blue-600 text-right' : 'bg-gray-700'}`}>
              <p className="text-sm">{msg.text}</p>
              <p className="text-[10px] text-gray-400 mt-1">{msg.time}</p>
            </div>
          </div>
        ))}
      </div>

      {/* Reflection Modal */}
      {showReflection && (
        <div className="fixed inset-0 bg-black bg-opacity-70 z-50 flex items-center justify-center">
          <div className="bg-white text-black rounded-lg shadow-lg p-6 w-full max-w-xl">
            <h2 className="text-xl font-bold mb-2">ðŸªž Weekly Reflection</h2>
            <p className="whitespace-pre-wrap text-sm">{weeklySummary}</p>
            <button onClick={() => setShowReflection(false)} className="mt-4 bg-blue-600 text-white px-4 py-2 rounded">
              Close
            </button>
          </div>
        </div>
      )}

      {/* Input & Actions */}
      <div className="p-4 bg-gray-800 flex flex-col items-center gap-2">
        <div className="w-full flex gap-2">
          <input
            type="text"
            placeholder="Share your thoughts..."
            className="flex-1 p-2 rounded bg-gray-700 text-white border border-gray-600 focus:outline-none"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
          />
          <button
            onClick={sendMessage}
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-600 px-4 py-2 rounded disabled:opacity-50"
          >
            Send
          </button>
        </div>
        <div className="flex flex-wrap gap-3 w-full justify-center">
          <div className="bg-green-600 hover:bg-green-700 text-white font-semibold px-4 py-3 rounded flex items-center">
            <WhisperRecorder onTranscribe={(text) => setInput(text)} />
          </div>
          <button
            className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-3 rounded"
            onClick={() => setShowMemory(prev => !prev)}
          >
            ðŸ§  Memory
          </button>
          <button
            className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-3 rounded"
            onClick={() => setShowReflection(true)}
          >
            ðŸ“˜ Weekly Reflection
          </button>
        </div>
      </div>

      {showMemory && (
        <div className="bg-gray-700 text-white p-4">
          <MemoryDashboard />
        </div>
      )}
    </div>
  );
};

export default App;
