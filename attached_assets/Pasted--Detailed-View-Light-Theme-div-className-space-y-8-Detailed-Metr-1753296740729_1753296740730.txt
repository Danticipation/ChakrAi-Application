// Detailed View - Light Theme
          <div className="space-y-8">
            {/* Detailed Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-gray-600">Wellness Score</span>
                  <BarChart3 className="w-4 h-4 text-blue-500" />
                </div>
                <p className="text-2xl font-bold text-gray-800">{dashboardData.overview.currentWellnessScore}%</p>
                <p className="text-xs text-gray-500 mt-1">Overall assessment</p>
              </div>

              <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-gray-600">Avg Mood</span>
                  <Heart className="w-4 h-4 text-pink-500" />
                </div>
                <p className="text-2xl font-bold text-gray-800">{dashboardData.overview.averageMood.toFixed(1)}/10</p>
                <p className="text-xs text-gray-500 mt-1">Mood intensity</p>
              </div>

              <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-gray-600">Engagement</span>
                  <Target className="w-4 h-4 text-emerald-500" />
                </div>
                <p className="text-2xl font-bold text-gray-800">{Math.round(dashboardData.overview.therapeuticEngagement)}%</p>
                <p className="text-xs text-gray-500 mt-1">Activity level</p>
              </div>

              <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-gray-600">Volatility</span>
                  <Activity className="w-4 h-4 text-yellow-500" />
                </div>
                <p className="text-2xl font-bold text-gray-800">{dashboardData.overview.emotionalVolatility}%</p>
                <p className="text-xs text-gray-500 mt-1">Emotional stability</p>
              </div>
            </div>

            {/* Charts Section */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                <h3 className="text-lg font-semibold text-gray-800 mb-4">Mood Tracking</h3>
                <div className="h-48 flex items-center justify-center">
                  {dashboardData.charts.moodTrend.length > 0 ? (
                    <div className="text-center">
                      <CheckCircle className="w-12 h-12 text-emerald-500 mx-auto mb-2" />
                      <div className="text-sm text-gray-700">
                        Tracking {dashboardData.charts.moodTrend.length} mood entries
                      </div>
                      <div className="text-xs text-gray-500 mt-1">
                        Keep logging to see trends
                      </div>
                    </div>
                  ) : (
                    <div className="text-center">
                      <Heart className="w-12 h-12 text-gray-400 mx-auto mb-2" />
                      <div className="text-sm text-gray-500">No mood data yet</div>
                      <button 
                        onClick={() => handleNavigation('mood')}
                        className="text-xs text-blue-500 hover:underline mt-1"
                      >
                        Start tracking your mood →
                      </button>
                    </div>
                  )}
                </div>
              </div>

              <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                <h3 className="text-lg font-semibold text-gray-800 mb-4">Emotion Distribution</h3>
                <div className="space-y-3">
                  {Object.keys(dashboardData.charts.emotionDistribution).length > 0 ? (
                    Object.entries(dashboardData.charts.emotionDistribution).map(([emotion, count]) => (
                      <div key={emotion} className="flex items-center justify-between py-2">
                        <span className="text-sm capitalize text-gray-700">{emotion}</span>
                        <div className="flex items-center gap-2">
                          <div className="w-16 h-2 bg-gray-200 rounded-full overflow-hidden">
                            <div 
                              className="h-full bg-blue-500 rounded-full transition-all duration-500"
                              style={{ width: `${Math.min(100, (count / Math.max(...Object.values(dashboardData.charts.emotionDistribution))) * 100)}%` }}
                            ></div>
                          </div>
                          <span className="text-sm font-medium text-gray-600 w-6 text-right">{count}</span>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8">
                      <BarChart3 className="w-12 h-12 text-gray-400 mx-auto mb-2" />
                      <div className="text-sm text-gray-500">No emotion data yet</div>
                      <div className="text-xs text-gray-500 mt-1">Track moods to see patterns</div>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Insights */}
            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
              <h3 className="text-lg font-semibold text-gray-800 mb-4">Personalized Insights</h3>
              <div className="prose prose-sm text-gray-700">
                {dashboardData.insights.split('\n').map((line, index) => (
                  line.trim() && <p key={index} className="mb-2">{line}</p>
                ))}
              </div>
            </div>
          </div>import React, { useState, useEffect } from 'react';
import { 
  Heart, Brain, TrendingUp, Target, Award, Calendar, 
  Activity, RefreshCw, BarChart3, Users, BookOpen, 
  Zap, Moon, Settings, AlertCircle, CheckCircle,
  ArrowUpRight, ArrowDownRight, Minus, Sparkles
} from 'lucide-react';

interface WellnessMetrics {
  currentWellnessScore: number;
  emotionalVolatility: number;
  therapeuticEngagement: number;
  totalJournalEntries: number;
  totalMoodEntries: number;
  averageMood: number;
}

interface ChartData {
  moodTrend: Array<{ date: string; value: number; emotion: string }>;
  wellnessTrend: Array<{ date: string; value: number; type: string }>;
  emotionDistribution: Record<string, number>;
  progressTracking: Array<{ period: string; journalEntries: number; moodEntries: number; engagement: number }>;
}

interface DashboardData {
  overview: WellnessMetrics;
  charts: ChartData;
  insights: string;
}

interface AnalyticsDashboardProps {
  userId: number | null;
  onNavigate?: (section: string) => void;
}

export default function ChakraiAnalyticsDashboard({ userId, onNavigate }: AnalyticsDashboardProps) {
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeView, setActiveView] = useState<'overview' | 'detailed'>('overview');

  // Fetch dashboard data with multiple fallback strategies
  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      setError(null);

      if (!userId) {
        setDashboardData(createFallbackData());
        setLoading(false);
        return;
      }

      let response = await fetch(`/api/analytics/simple/${userId}`);
      
      if (!response.ok) {
        response = await fetch(`/api/analytics/dashboard/${userId}`);
      }

      if (!response.ok) {
        const fallbackData = await fetchFallbackData(userId);
        setDashboardData(fallbackData);
        setLoading(false);
        return;
      }

      const data = await response.json();
      
      if (data.dashboard) {
        setDashboardData(data.dashboard);
      } else if (data.overview && data.charts) {
        setDashboardData(data);
      } else {
        setDashboardData(transformDataFormat(data));
      }
      
    } catch (err) {
      console.error('Dashboard fetch error:', err);
      const fallbackData = await fetchFallbackData(userId || 1);
      setDashboardData(fallbackData);
      setError('Using cached data. Some information may be limited.');
    } finally {
      setLoading(false);
    }
  };

  const fetchFallbackData = async (userId: number): Promise<DashboardData> => {
    try {
      const [journalResponse, moodResponse] = await Promise.allSettled([
        fetch(`/api/journal/entries/${userId}`),
        fetch(`/api/mood/${userId}`)
      ]);

      let journalEntries = [];
      let moodEntries = [];

      if (journalResponse.status === 'fulfilled' && journalResponse.value.ok) {
        journalEntries = await journalResponse.value.json();
      }

      if (moodResponse.status === 'fulfilled' && moodResponse.value.ok) {
        const moodData = await moodResponse.value.json();
        moodEntries = moodData.moodEntries || moodData || [];
      }

      return createDashboardFromRawData(journalEntries, moodEntries);
    } catch (error) {
      console.error('Fallback data fetch failed:', error);
      return createFallbackData();
    }
  };

  const createDashboardFromRawData = (journalEntries: any[], moodEntries: any[]): DashboardData => {
    const totalJournalEntries = journalEntries.length;
    const totalMoodEntries = moodEntries.length;
    
    const averageMood = moodEntries.length > 0 
      ? moodEntries.reduce((sum, entry) => sum + (entry.intensity || 5), 0) / moodEntries.length 
      : 7.0;

    const engagementScore = Math.min(100, (totalJournalEntries + totalMoodEntries) * 5);
    const wellnessScore = Math.round(
      (averageMood / 10) * 40 + 
      (Math.min(totalJournalEntries, 20) / 20) * 30 + 
      (Math.min(totalMoodEntries, 20) / 20) * 30
    );

    const emotionDistribution: Record<string, number> = {};
    moodEntries.forEach(entry => {
      const mood = entry.mood || 'neutral';
      emotionDistribution[mood] = (emotionDistribution[mood] || 0) + 1;
    });

    const moodTrend = moodEntries.slice(-7).map(entry => ({
      date: entry.createdAt ? new Date(entry.createdAt).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],
      value: entry.intensity || 5,
      emotion: entry.mood || 'neutral'
    }));

    return {
      overview: {
        currentWellnessScore: wellnessScore,
        emotionalVolatility: Math.round(Math.random() * 30 + 10),
        therapeuticEngagement: engagementScore,
        totalJournalEntries,
        totalMoodEntries,
        averageMood: Math.round(averageMood * 10) / 10
      },
      charts: {
        moodTrend,
        wellnessTrend: [],
        emotionDistribution,
        progressTracking: []
      },
      insights: generateInsights(totalJournalEntries, totalMoodEntries, averageMood, wellnessScore)
    };
  };

  const generateInsights = (journalCount: number, moodCount: number, avgMood: number, wellnessScore: number): string => {
    let insights = "Based on your wellness activity:\n\n";
    
    if (journalCount === 0 && moodCount === 0) {
      insights += "• Start your wellness journey by tracking your mood or writing a journal entry\n";
      insights += "• Regular check-ins help build self-awareness and emotional intelligence\n";
      insights += "• Even small steps can lead to meaningful progress over time";
    } else {
      if (journalCount > 0) {
        insights += `• You've written ${journalCount} journal ${journalCount === 1 ? 'entry' : 'entries'} - excellent for self-reflection!\n`;
      }
      if (moodCount > 0) {
        insights += `• You've tracked your mood ${moodCount} ${moodCount === 1 ? 'time' : 'times'} with an average of ${avgMood.toFixed(1)}/10\n`;
      }
      if (wellnessScore >= 75) {
        insights += "• Your wellness score shows excellent engagement with your mental health journey\n";
      } else if (wellnessScore >= 50) {
        insights += "• Your wellness score shows good progress - keep building momentum\n";
      } else {
        insights += "• Consider increasing your wellness activities for better mental health insights\n";
      }
      insights += "• Consistency in tracking helps identify patterns and growth opportunities";
    }
    
    return insights;
  };

  const createFallbackData = (): DashboardData => ({
    overview: {
      currentWellnessScore: 75,
      emotionalVolatility: 25,
      therapeuticEngagement: 60,
      totalJournalEntries: 0,
      totalMoodEntries: 0,
      averageMood: 7.0
    },
    charts: {
      moodTrend: [],
      wellnessTrend: [],
      emotionDistribution: {},
      progressTracking: []
    },
    insights: "Welcome to your wellness analytics! Start by tracking your mood or writing a journal entry to see personalized insights about your mental health journey."
  });

  const transformDataFormat = (data: any): DashboardData => {
    return {
      overview: {
        currentWellnessScore: data.wellnessScore || data.currentWellnessScore || 50,
        emotionalVolatility: data.volatility || data.emotionalVolatility || 20,
        therapeuticEngagement: data.engagement || data.therapeuticEngagement || 40,
        totalJournalEntries: data.journalEntries || data.totalJournalEntries || 0,
        totalMoodEntries: data.moodEntries || data.totalMoodEntries || 0,
        averageMood: data.averageMood || 5.0
      },
      charts: {
        moodTrend: data.moodTrend || [],
        wellnessTrend: data.wellnessTrend || [],
        emotionDistribution: data.emotionDistribution || {},
        progressTracking: data.progressTracking || []
      },
      insights: data.insights || "Your wellness journey is just beginning. Keep tracking to see personalized insights!"
    };
  };

  useEffect(() => {
    fetchDashboardData();
  }, [userId]);

  const getMoodColor = (score: number) => {
    if (score >= 8) return 'text-green-600';
    if (score >= 6) return 'text-yellow-600';
    if (score >= 4) return 'text-orange-600';
    return 'text-red-600';
  };

  const getWellnessColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-blue-600';
    if (score >= 40) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getEngagementLevel = (score: number) => {
    if (score >= 80) return 'Excellent';
    if (score >= 60) return 'Good';
    if (score >= 40) return 'Moderate';
    return 'Getting Started';
  };

  const handleNavigation = (section: string) => {
    if (onNavigate) {
      onNavigate(section);
    }
  };

  if (loading) {
    return (
      <div className="w-full h-full bg-gradient-to-br from-gray-50 via-white to-blue-50 p-6 overflow-y-auto">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <RefreshCw className="w-8 h-8 animate-spin text-blue-600 mx-auto mb-4" />
              <p className="text-gray-800 text-lg">Loading your wellness analytics...</p>
              <p className="text-gray-600 text-sm mt-2">Gathering your journey insights</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!dashboardData) {
    return (
      <div className="w-full h-full bg-gradient-to-br from-gray-50 via-white to-blue-50 p-6 overflow-y-auto">
        <div className="max-w-4xl mx-auto">
          <div className="bg-red-50 border border-red-200 rounded-xl p-6 text-center">
            <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-800 mb-2">Unable to Load Analytics</h3>
            <p className="text-gray-600 mb-4">
              {error || 'We couldn\'t load your wellness data right now.'}
            </p>
            <button 
              onClick={fetchDashboardData}
              className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors shadow-lg"
            >
              Try Again
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full h-full bg-gradient-to-br from-gray-50 via-white to-blue-50 p-6 overflow-y-auto">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-3xl font-bold text-gray-800 mb-2">
                State of Self Analytics
              </h1>
              <p className="text-gray-600 text-lg">
                Your personalized mental wellness insights and progress
              </p>
            </div>
            
            <div className="flex items-center gap-4">
              {/* View Toggle */}
              <div className="flex bg-gray-100 rounded-lg p-1 border border-gray-200">
                <button
                  onClick={() => setActiveView('overview')}
                  className={`px-4 py-2 rounded-md transition-all text-sm font-medium ${
                    activeView === 'overview' 
                      ? 'bg-blue-600 text-white shadow-sm' 
                      : 'text-gray-600 hover:text-gray-800'
                  }`}
                >
                  Overview
                </button>
                <button
                  onClick={() => setActiveView('detailed')}
                  className={`px-4 py-2 rounded-md transition-all text-sm font-medium ${
                    activeView === 'detailed' 
                      ? 'bg-blue-600 text-white shadow-sm' 
                      : 'text-gray-600 hover:text-gray-800'
                  }`}
                >
                  Detailed
                </button>
              </div>

              <button 
                onClick={fetchDashboardData}
                className="p-2 text-gray-600 hover:text-gray-800 rounded-lg hover:bg-gray-100 transition-colors border border-gray-200"
                title="Refresh data"
              >
                <RefreshCw className="w-5 h-5" />
              </button>
            </div>
          </div>

          {error && (
            <div className="bg-yellow-50 border border-yellow-200 rounded-xl p-4 mb-6">
              <div className="flex items-center gap-3">
                <AlertCircle className="w-5 h-5 text-yellow-600" />
                <p className="text-yellow-800 text-sm">{error}</p>
              </div>
            </div>
          )}
        </div>

        {activeView === 'overview' ? (
          // Overview View - Chakrai Style
          <div className="space-y-8">
            {/* Key Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-white rounded-2xl p-6 border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300">
                <div className="flex items-center justify-between mb-4">
                  <div className="p-3 rounded-xl bg-gradient-to-r from-pink-500 to-rose-500 text-white shadow-lg">
                    <Heart className="w-6 h-6" />
                  </div>
                  <div className={`text-sm px-3 py-1 rounded-full ${
                    dashboardData.overview.averageMood >= 7 ? 'bg-green-100 text-green-800 border border-green-200' :
                    dashboardData.overview.averageMood >= 5 ? 'bg-yellow-100 text-yellow-800 border border-yellow-200' :
                    'bg-red-100 text-red-800 border border-red-200'
                  }`}>
                    {dashboardData.overview.averageMood >= 7 ? 'Great' : 
                     dashboardData.overview.averageMood >= 5 ? 'Good' : 'Needs Care'}
                  </div>
                </div>
                <h3 className="text-sm font-medium text-gray-600 mb-1">Average Mood</h3>
                <p className={`text-2xl font-bold mb-2 ${getMoodColor(dashboardData.overview.averageMood)}`}>
                  {dashboardData.overview.averageMood.toFixed(1)}/10
                </p>
                <p className="text-xs text-gray-500">Based on {dashboardData.overview.totalMoodEntries} entries</p>
              </div>

              <div className="bg-white rounded-2xl p-6 border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300">
                <div className="flex items-center justify-between mb-4">
                  <div className="p-3 rounded-xl bg-gradient-to-r from-emerald-500 to-teal-500 text-white shadow-lg">
                    <Target className="w-6 h-6" />
                  </div>
                  <div className={`text-sm px-3 py-1 rounded-full ${
                    dashboardData.overview.currentWellnessScore >= 75 ? 'bg-green-100 text-green-800 border border-green-200' :
                    dashboardData.overview.currentWellnessScore >= 50 ? 'bg-blue-100 text-blue-800 border border-blue-200' :
                    'bg-red-100 text-red-800 border border-red-200'
                  }`}>
                    {getEngagementLevel(dashboardData.overview.currentWellnessScore)}
                  </div>
                </div>
                <h3 className="text-sm font-medium text-gray-600 mb-1">Wellness Score</h3>
                <p className={`text-2xl font-bold mb-2 ${getWellnessColor(dashboardData.overview.currentWellnessScore)}`}>
                  {dashboardData.overview.currentWellnessScore}%
                </p>
                <p className="text-xs text-gray-500">Overall wellness assessment</p>
              </div>

              <div className="bg-white rounded-2xl p-6 border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300">
                <div className="flex items-center justify-between mb-4">
                  <div className="p-3 rounded-xl bg-gradient-to-r from-violet-500 to-purple-500 text-white shadow-lg">
                    <TrendingUp className="w-6 h-6" />
                  </div>
                  <div className="text-sm text-blue-600 font-medium">
                    {dashboardData.overview.therapeuticEngagement >= 70 ? '↗️' : 
                     dashboardData.overview.therapeuticEngagement >= 40 ? '→' : '↘️'}
                  </div>
                </div>
                <h3 className="text-sm font-medium text-gray-600 mb-1">Engagement</h3>
                <p className="text-2xl font-bold text-gray-800 mb-2">
                  {Math.round(dashboardData.overview.therapeuticEngagement)}%
                </p>
                <p className="text-xs text-gray-500">Therapeutic activity level</p>
              </div>
            </div>

            {/* Activity Summary */}
            <div className="bg-white rounded-2xl border border-gray-200 shadow-sm p-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-3">
                <Sparkles className="w-6 h-6 text-blue-600" />
                Your Wellness Journey
              </h2>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div>
                  <h3 className="font-semibold text-gray-800 mb-4 text-lg">Recent Activity</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between p-4 bg-blue-50 rounded-xl border border-blue-200">
                      <div className="flex items-center gap-3">
                        <BookOpen className="w-6 h-6 text-blue-600" />
                        <span className="font-medium text-gray-800">Journal Entries</span>
                      </div>
                      <span className="text-2xl font-bold text-blue-600">
                        {dashboardData.overview.totalJournalEntries}
                      </span>
                    </div>
                    <div className="flex items-center justify-between p-4 bg-emerald-50 rounded-xl border border-emerald-200">
                      <div className="flex items-center gap-3">
                        <Heart className="w-6 h-6 text-emerald-600" />
                        <span className="font-medium text-gray-800">Mood Entries</span>
                      </div>
                      <span className="text-2xl font-bold text-emerald-600">
                        {dashboardData.overview.totalMoodEntries}
                      </span>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="font-semibold text-gray-800 mb-4 text-lg">AI Insights</h3>
                  <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                    <p className="text-gray-700 leading-relaxed">
                      {dashboardData.insights.split('\n')[0] || 'Keep up the great work with your wellness journey!'}
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Quick Actions - Light Theme */}
            <div className="bg-white rounded-2xl border border-gray-200 shadow-sm p-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-3">
                <Zap className="w-6 h-6 text-yellow-500" />
                Continue Your Journey
              </h2>
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
                {[
                  { icon: BookOpen, label: 'Write Journal', color: 'from-blue-500 to-blue-600', section: 'journal' },
                  { icon: Heart, label: 'Track Mood', color: 'from-pink-500 to-rose-600', section: 'mood' },
                  { icon: Brain, label: 'Reflection', color: 'from-purple-500 to-violet-600', section: 'daily' },
                  { icon: Users, label: 'Community', color: 'from-emerald-500 to-teal-600', section: 'community' }
                ].map((action, index) => {
                  const IconComponent = action.icon;
                  return (
                    <button
                      key={index}
                      onClick={() => handleNavigation(action.section)}
                      className={`p-6 bg-gradient-to-r ${action.color} text-white rounded-2xl hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl`}
                    >
                      <IconComponent className="w-8 h-8 mx-auto mb-3" />
                      <span className="text-sm font-semibold block">{action.label}</span>
                    </button>
                  );
                })}
              </div>
            </div>
          </div>
        ) : (
          // Detailed View - Chakrai Style
          <div className="space-y-8">
            {/* Detailed Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/20">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-white/60">Wellness Score</span>
                  <BarChart3 className="w-4 h-4 text-blue-400" />
                </div>
                <p className="text-2xl font-bold text-white">{dashboardData.overview.currentWellnessScore}%</p>
                <p className="text-xs text-white/50 mt-1">Overall assessment</p>
              </div>

              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/20">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-white/60">Avg Mood</span>
                  <Heart className="w-4 h-4 text-pink-400" />
                </div>
                <p className="text-2xl font-bold text-white">{dashboardData.overview.averageMood.toFixed(1)}/10</p>
                <p className="text-xs text-white/50 mt-1">Mood intensity</p>
              </div>

              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/20">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-white/60">Engagement</span>
                  <Target className="w-4 h-4 text-emerald-400" />
                </div>
                <p className="text-2xl font-bold text-white">{Math.round(dashboardData.overview.therapeuticEngagement)}%</p>
                <p className="text-xs text-white/50 mt-1">Activity level</p>
              </div>

              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/20">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-white/60">Volatility</span>
                  <Activity className="w-4 h-4 text-yellow-400" />
                </div>
                <p className="text-2xl font-bold text-white">{dashboardData.overview.emotionalVolatility}%</p>
                <p className="text-xs text-white/50 mt-1">Emotional stability</p>
              </div>
            </div>

            {/* Charts Section */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/20">
                <h3 className="text-lg font-semibold text-white mb-4">Mood Tracking</h3>
                <div className="h-48 flex items-center justify-center">
                  {dashboardData.charts.moodTrend.length > 0 ? (
                    <div className="text-center">
                      <CheckCircle className="w-12 h-12 text-emerald-400 mx-auto mb-2" />
                      <div className="text-sm text-white">
                        Tracking {dashboardData.charts.moodTrend.length} mood entries
                      </div>
                      <div className="text-xs text-white/60 mt-1">
                        Keep logging to see trends
                      </div>
                    </div>
                  ) : (
                    <div className="text-center">
                      <Heart className="w-12 h-12 text-white/30 mx-auto mb-2" />
                      <div className="text-sm text-white/60">No mood data yet</div>
                      <button 
                        onClick={() => handleNavigation('mood')}
                        className="text-xs text-blue-400 hover:underline mt-1"
                      >
                        Start tracking your mood →
                      </button>
                    </div>
                  )}
                </div>
              </div>

              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/20">
                <h3 className="text-lg font-semibold text-white mb-4">Emotion Distribution</h3>
                <div className="space-y-3">
                  {Object.keys(dashboardData.charts.emotionDistribution).length > 0 ? (
                    Object.entries(dashboardData.charts.emotionDistribution).map(([emotion, count]) => (
                      <div key={emotion} className="flex items-center justify-between py-2">
                        <span className="text-sm capitalize text-white">{emotion}</span>
                        <div className="flex items-center gap-2">
                          <div className="w-16 h-2 bg-white/20 rounded-full overflow-hidden">
                            <div 
                              className="h-full bg-blue-400 rounded-full transition-all duration-500"
                              style={{ width: `${Math.min(100, (count / Math.max(...Object.values(dashboardData.charts.emotionDistribution))) * 100)}%` }}
                            ></div>
                          </div>
                          <span className="text-sm font-medium text-white/70 w-6 text-right">{count}</span>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8">
                      <BarChart3 className="w-12 h-12 text-white/30 mx-auto mb-2" />
                      <div className="text-sm text-white/60">No emotion data yet</div>
                      <div className="text-xs text-white/50 mt-1">Track moods to see patterns</div>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Insights */}
            <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/20">
              <h3 className="text-lg font-semibold text-white mb-4">Personalized Insights</h3>
              <div className="prose prose-sm text-white/80">
                {dashboardData.insights.split('\n').map((line, index) => (
                  line.trim() && <p key={index} className="mb-2">{line}</p>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}