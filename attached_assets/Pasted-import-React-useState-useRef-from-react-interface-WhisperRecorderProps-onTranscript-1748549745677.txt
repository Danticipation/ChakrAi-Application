import React, { useState, useRef } from 'react';

interface WhisperRecorderProps {
  onTranscription?: (text: string) => void;
  onResponse?: (response: string) => void;
}

const WhisperRecorder: React.FC<WhisperRecorderProps> = ({ onTranscription, onResponse }) => {
  const [recording, setRecording] = useState(false);
  const [processing, setProcessing] = useState(false);
  const [transcription, setTranscription] = useState('');
  const [response, setResponse] = useState('');
  const [error, setError] = useState('');
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunks = useRef<Blob[]>([]);

  const startRecording = async () => {
    setError('');
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      audioChunks.current = [];

      mediaRecorder.ondataavailable = (event) => {
        audioChunks.current.push(event.data);
      };

      mediaRecorder.onstop = async () => {
        const audioBlob = new Blob(audioChunks.current, { type: 'audio/webm' });
        const formData = new FormData();
        formData.append('audio', audioBlob);

        setProcessing(true);

        try {
          const transcriptionRes = await fetch('/api/transcribe', {
            method: 'POST',
            body: formData,
          });

          if (!transcriptionRes.ok) throw new Error('Transcription failed.');
          const { text } = await transcriptionRes.json();
          setTranscription(text);
          onTranscription?.(text);
        } catch (err) {
          setError('Transcription failed: ' + (err as Error).message);
        } finally {
          setProcessing(false);
        }
      };

      mediaRecorder.start();
      setRecording(true);
    } catch (err) {
      setError('Recording failed: ' + (err as Error).message);
    }
  };

  const stopRecording = () => {
    mediaRecorderRef.current?.stop();
    setRecording(false);
  };

  const sendToBot = async () => {
    if (!transcription) return;
    setProcessing(true);
    setError('');

    try {
      const chatRes = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: transcription }),
      });

      if (!chatRes.ok) throw new Error('Chat request failed.');

      const data = await chatRes.json();
      const reply = data.reply;
      setResponse(reply);
      onResponse?.(reply);

      const voiceRes = await fetch('/api/voice', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: reply }),
      });

      if (!voiceRes.ok) throw new Error('TTS failed.');

      const audioBlob = await voiceRes.blob();
      const audioURL = URL.createObjectURL(audioBlob);
      const audio = new Audio(audioURL);
      audio.play();
    } catch (err) {
      setError('Bot response failed: ' + (err as Error).message);
    } finally {
      setProcessing(false);
    }
  };

  return (
    <div className="p-4 rounded-lg bg-zinc-800 text-white shadow-md">
      <div className="flex gap-4">
        {!recording ? (
          <button onClick={startRecording} disabled={processing} className="bg-green-600 hover:bg-green-700 px-4 py-2 rounded">Start</button>
        ) : (
          <button onClick={stopRecording} className="bg-red-600 hover:bg-red-700 px-4 py-2 rounded">Stop</button>
        )}
        {processing && <span className="text-sm text-yellow-400">Processing...</span>}
      </div>

      {transcription && (
        <div className="mt-4">
          <label className="text-sm text-gray-400">Transcription:</label>
          <p className="bg-gray-700 p-3 rounded mt-1 text-sm whitespace-pre-wrap">{transcription}</p>
          <button onClick={sendToBot} className="mt-2 bg-blue-500 hover:bg-blue-600 px-4 py-2 rounded text-sm">Send to Bot</button>
        </div>
      )}

      {response && (
        <div className="mt-4">
          <label className="text-sm text-gray-400">Bot Response:</label>
          <p className="bg-gray-700 p-3 rounded mt-1 text-sm whitespace-pre-wrap">{response}</p>
        </div>
      )}

      {error && <p className="mt-4 text-red-500 text-sm">{error}</p>}
    </div>
  );
};

export default WhisperRecorder;
