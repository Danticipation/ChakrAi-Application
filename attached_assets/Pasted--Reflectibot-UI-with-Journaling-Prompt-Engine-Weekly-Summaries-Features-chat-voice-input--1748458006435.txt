// Reflectibot UI with Journaling Prompt Engine + Weekly Summaries
// Features: chat, voice input, memory tracking, milestone logic, guided journaling prompts

import { useState, useRef, useEffect } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { motion } from 'framer-motion';
import axios from 'axios';

const journalingPrompts = [
  "What made you smile recently?",
  "Is there anything weighing on your mind?",
  "What's one thing you're proud of this week?",
  "What’s something you wish others understood about you?",
  "What are you avoiding right now that you probably shouldn't be?"
];

export default function MirrorBotUI() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [showGrowth, setShowGrowth] = useState(false);
  const [growthStats, setGrowthStats] = useState({
    wordsLearned: 0,
    factsRemembered: 0,
    stage: 'Infant 🍼',
  });
  const [isListening, setIsListening] = useState(false);
  const [showPrompt, setShowPrompt] = useState(false);
  const messagesEndRef = useRef(null);
  const queryClient = useQueryClient();
  const recognitionRef = useRef(null);

  useEffect(() => {
    if ('webkitSpeechRecognition' in window) {
      recognitionRef.current = new window.webkitSpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = 'en-US';

      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
        setIsListening(false);
      };

      recognitionRef.current.onerror = (event) => {
        console.error('Speech recognition error', event);
        setIsListening(false);
      };

      recognitionRef.current.onend = () => setIsListening(false);
    }
  }, []);

  const handleVoiceInput = () => {
    if (recognitionRef.current) {
      setIsListening(true);
      recognitionRef.current.start();
    } else {
      alert('Voice recognition is not supported in this browser.');
    }
  };

  const mutation = useMutation({
    mutationFn: async (text) => {
      const res = await axios.post('/api/message', {
        userId: 1, // Replace with actual user ID logic
        text,
      });
      return res.data;
    },
    onSuccess: (data) => {
      setGrowthStats({
        wordsLearned: data.totalWordCount,
        factsRemembered: data.factsCount || 0,
        stage: data.stage,
      });

      const response = {
        text: `Reflectibot: I heard you say "${data.echoedText || input}"`,
        sender: 'bot'
      };
      setMessages(prev => [...prev, { text: input, sender: 'user' }, response]);
      setInput('');
    }
  });

  const sendMessage = () => {
    if (!input.trim()) return;
    mutation.mutate(input);
  };

  const sendPrompt = () => {
    const prompt = journalingPrompts[Math.floor(Math.random() * journalingPrompts.length)];
    setMessages(prev => [...prev, { text: prompt, sender: 'bot' }]);
    setShowPrompt(false);
  };

  const toggleGrowthPanel = () => {
    setShowGrowth(!showGrowth);
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-black text-white flex flex-col items-center justify-center px-4 py-8">
      <div className="w-full max-w-3xl h-[80vh] flex flex-col border border-gray-700 rounded-2xl overflow-hidden shadow-xl">
        <div className="flex-grow p-4 overflow-y-auto bg-gray-950/80 backdrop-blur">
          {messages.map((msg, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
              className={`mb-3 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}
            >
              <span className={`inline-block px-4 py-2 rounded-xl max-w-xs ${msg.sender === 'user' ? 'bg-blue-600' : 'bg-gray-800'}`}>
                {msg.text}
              </span>
            </motion.div>
          ))}
          <div ref={messagesEndRef} />
        </div>
        <div className="p-4 border-t border-gray-700 bg-gray-900">
          <div className="flex gap-2">
            <Input
              className="flex-grow bg-gray-800 border border-gray-600 text-white"
              value={input}
              onChange={e => setInput(e.target.value)}
              onKeyDown={e => e.key === 'Enter' && sendMessage()}
              placeholder="Type or speak your thoughts..."
            />
            <Button className="bg-emerald-600 hover:bg-emerald-700" onClick={sendMessage}>Send</Button>
            <Button className={`bg-indigo-600 hover:bg-indigo-700 ${isListening ? 'animate-pulse' : ''}`} onClick={handleVoiceInput}>🎤</Button>
            <Button className="bg-yellow-600 hover:bg-yellow-700" onClick={toggleGrowthPanel}>📊</Button>
            <Button className="bg-pink-600 hover:bg-pink-700" onClick={() => setShowPrompt(true)}>🧠</Button>
          </div>
        </div>
      </div>

      {showGrowth && (
        <div className="w-full max-w-3xl mt-6 p-4 bg-gray-800 rounded-xl shadow-lg text-left">
          <h2 className="text-lg font-bold text-emerald-400 mb-2">Reflectibot Growth Dashboard</h2>
          <ul className="list-disc pl-6 space-y-1 text-sm text-gray-300">
            <li><strong>Words Learned:</strong> {growthStats.wordsLearned}</li>
            <li><strong>Facts Remembered:</strong> {growthStats.factsRemembered}</li>
            <li><strong>Current Stage:</strong> {growthStats.stage}</li>
            <li><strong>Next Milestone:</strong> {(growthStats.wordsLearned < 200) ? '200 words for Adolescent unlock 🚀' : 'You’re already an advanced being 🧠'}</li>
          </ul>
        </div>
      )}

      {showPrompt && (
        <div className="w-full max-w-3xl mt-4 p-4 bg-gray-900 border border-gray-700 rounded-xl shadow">
          <h3 className="text-lg text-white mb-2">Reflect with me...</h3>
          <p className="text-sm text-gray-300 mb-4">Ready for a journaling question?</p>
          <Button className="bg-purple-600 hover:bg-purple-700" onClick={sendPrompt}>Give me a prompt</Button>
        </div>
      )}

      <div className="mt-6 text-sm text-gray-400">Reflectibot™ v1.0 — Your evolving AI twin.</div>
    </div>
  );
}
