import React, { useState, useEffect } from 'react';
import { Star, Sparkles, RefreshCw, Volume2, VolumeX, Loader2 } from 'lucide-react';
import "keen-slider/keen-slider.min.css";
import { useKeenSlider } from "keen-slider/react";

interface HoroscopeData {
  sign: string;
  horoscope: string;
  date: string;
}

const zodiacSigns = [
  { name: 'aries', symbol: '♈', emoji: '🐏', constellation: 'ram' },
  { name: 'taurus', symbol: '♉', emoji: '🐂', constellation: 'bull' },
  { name: 'gemini', symbol: '♊', emoji: '👯', constellation: 'twins' },
  { name: 'cancer', symbol: '♋', emoji: '🦀', constellation: 'crab' },
  { name: 'leo', symbol: '♌', emoji: '🦁', constellation: 'lion' },
  { name: 'virgo', symbol: '♍', emoji: '👩', constellation: 'maiden' },
  { name: 'libra', symbol: '♎', emoji: '⚖️', constellation: 'scales' },
  { name: 'scorpio', symbol: '♏', emoji: '🦂', constellation: 'scorpion' },
  { name: 'sagittarius', symbol: '♐', emoji: '🏹', constellation: 'archer' },
  { name: 'capricorn', symbol: '♑', emoji: '🐐', constellation: 'goat' },
  { name: 'aquarius', symbol: '♒', emoji: '🏺', constellation: 'water' },
  { name: 'pisces', symbol: '♓', emoji: '🐟', constellation: 'fish' }
];

interface HoroscopeProps {
  onBack?: () => void;
}

export default function Horoscope({ onBack }: HoroscopeProps) {
  const [selectedSign, setSelectedSign] = useState<string>('');
  const [horoscopeData, setHoroscopeData] = useState<HoroscopeData | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isLoadingAudio, setIsLoadingAudio] = useState(false);
  const [currentAudio, setCurrentAudio] = useState<HTMLAudioElement | null>(null);

  const [sliderRef] = useKeenSlider({
    loop: false,
    mode: "free-snap",
    slides: {
      perView: 3.5,
      spacing: 15,
    },
    breakpoints: {
      "(min-width: 1024px)": {
        slides: { perView: 'auto' }, // Let desktop show all with scroll
      }
    }
  });

  const fetchHoroscope = async (sign: string) => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch(`/api/horoscope/${sign}`);
      if (response.ok) {
        const data = await response.json();
        setHoroscopeData({
          sign: sign.charAt(0).toUpperCase() + sign.slice(1),
          horoscope: data.horoscope,
          date: new Date().toLocaleDateString()
        });
      } else {
        throw new Error(`API failed with status ${response.status}`);
      }
    } catch (error) {
      setError('Unable to fetch horoscope. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  const handleSignChange = (sign: string) => {
    setSelectedSign(sign);
    fetchHoroscope(sign);
  };

  const handleRefresh = () => {
    fetchHoroscope(selectedSign);
  };

  const handleVoiceToggle = async () => {
    if (!horoscopeData) return;

    if (isPlaying && currentAudio) {
      currentAudio.pause();
      currentAudio.currentTime = 0;
      setIsPlaying(false);
      setCurrentAudio(null);
      return;
    }

    try {
      setIsLoadingAudio(true);
      setError(null);
      const response = await fetch('/api/text-to-speech', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          text: horoscopeData.horoscope,
          voice: 'carla',
          emotionalContext: 'calming'
        }),
      });
      if (!response.ok) throw new Error('Voice synthesis failed');

      const audioBlob = await response.blob();
      if (audioBlob.size > 0) {
        const audioUrl = URL.createObjectURL(audioBlob);
        const audio = new Audio(audioUrl);
        setCurrentAudio(audio);
        audio.onended = () => {
          setIsPlaying(false);
          setCurrentAudio(null);
          URL.revokeObjectURL(audioUrl);
        };
        setIsLoadingAudio(false);
        setIsPlaying(true);
        await audio.play();
      } else {
        throw new Error('No audio data received');
      }
    } catch (error) {
      setIsLoadingAudio(false);
      setIsPlaying(false);
      setCurrentAudio(null);
      setError('Voice reading failed. Please try again.');
    }
  };

  return (
    <div className="fixed inset-0 z-50 bg-gradient-to-br from-[#0f172a] to-[#1e293b] overflow-y-auto">
      <div className="min-h-full p-4 py-8">
        <div className="max-w-7xl mx-auto bg-[#1a237e]/80 backdrop-blur-xl rounded-2xl border border-[#7986cb]/30 shadow-2xl mb-8">
          <div className="sticky top-0 bg-[#1a237e]/90 backdrop-blur-xl p-6 border-b border-[#7986cb]/20 mb-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="p-3 rounded-full bg-gradient-to-r from-[#3f51b5] to-[#5c6bc0] shadow-lg">
                  <Star className="text-white" size={24} />
                </div>
                <div>
                  <h1 className="text-3xl font-light text-white tracking-wide">Daily Horoscope</h1>
                  <p className="text-white/60 text-sm mt-1">Cosmic guidance for your wellness journey</p>
                </div>
              </div>
              <div className="flex items-center space-x-3">
                <button
                  onClick={handleRefresh}
                  disabled={loading}
                  className="p-3 rounded-xl bg-[#1a237e]/60 hover:bg-[#1a237e]/80 transition-all duration-200 disabled:opacity-50 border border-[#7986cb]/20 hover:border-[#7986cb]/40"
                >
                  <RefreshCw className={`text-white ${loading ? 'animate-spin' : ''}`} size={20} />
                </button>
                <button
                  onClick={onBack || (() => window.history.back())}
                  className="p-3 rounded-xl bg-red-600/20 hover:bg-red-600/40 transition-all duration-200 border border-red-400/20 hover:border-red-400/40"
                  title="Back to Home"
                >
                  <span className="text-white text-xl">×</span>
                </button>
              </div>
            </div>
          </div>

          {/* Zodiac Selector - Scroll on desktop, swipe on mobile */}
          <div className="mb-8 px-6">
            <h3 className="text-xl font-light text-white mb-6 tracking-wide text-center">
              ✨ Select Your Zodiac Sign ✨
            </h3>
            <div
              ref={sliderRef}
              className="keen-slider flex overflow-x-auto space-x-4 p-2 no-scrollbar"
            >
              {zodiacSigns.map((sign) => (
                <div className="keen-slider__slide flex-shrink-0 w-40" key={sign.name}>
                  <button
                    onClick={() => handleSignChange(sign.name)}
                    className={`zodiac-card relative overflow-hidden group py-6 px-4 rounded-2xl border-2 constellation-backdrop ${
                      selectedSign === sign.name
                        ? 'selected bg-gradient-to-br from-purple-900/90 to-blue-900/90 border-purple-400/80 shadow-2xl shadow-purple-500/50'
                        : 'bg-gradient-to-br from-gray-900/70 to-gray-800/70 border-gray-500/50 hover:border-purple-400/60 hover:shadow-xl hover:shadow-purple-500/30'
                    }`}
                  >
                    <div className="relative z-10 flex flex-col items-center space-y-3">
                      <div className="text-3xl">{sign.emoji}</div>
                      <div className="text-2xl font-bold text-white/90">{sign.symbol}</div>
                      <div className="text-sm text-white/70">{sign.name}</div>
                    </div>
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* Horoscope Display */}
          <div className="bg-[var(--theme-secondary)] rounded-xl p-4 border border-[#3949ab]/30 max-h-[calc(100vh-400px)] overflow-y-auto">
            {!selectedSign ? (
              <div className="flex flex-col items-center justify-center py-12 text-center">
                <Star className="text-purple-300 mb-4" size={48} />
                <h3 className="text-xl font-semibold text-white mb-2">Choose Your Zodiac Sign</h3>
                <p className="text-white/70 max-w-md">
                  Select your zodiac sign above to receive personalized cosmic guidance and wellness insights.
                </p>
              </div>
            ) : loading ? (
              <div className="flex items-center justify-center py-8">
                <div className="flex items-center space-x-3">
                  <Sparkles className="text-purple-300 animate-pulse" size={24} />
                  <span className="text-white">Reading the stars...</span>
                </div>
              </div>
            ) : error ? (
              <div className="text-center py-8">
                <p className="text-red-300 mb-4">{error}</p>
                <button
                  onClick={handleRefresh}
                  className="px-4 py-2 theme-primary text-white rounded-lg hover:theme-primary transition-colors"
                >
                  Try Again
                </button>
              </div>
            ) : horoscopeData ? (
              <div className="space-y-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-2">
                    <Sparkles className="text-purple-300" size={20} />
                    <h2 className="text-xl font-bold text-white">
                      {horoscopeData.sign} - {horoscopeData.date}
                    </h2>
                  </div>
                  <button
                    onClick={handleVoiceToggle}
                    disabled={loading || isLoadingAudio}
                    className="p-2 rounded-lg theme-primary/50 hover:theme-primary/70 transition-colors disabled:opacity-50 flex items-center space-x-2"
                    title={isLoadingAudio ? "Loading audio..." : isPlaying ? "Stop reading" : "Read aloud"}
                  >
                    {isLoadingAudio ? (
                      <Loader2 className="text-white animate-spin" size={20} />
                    ) : isPlaying ? (
                      <VolumeX className="text-white" size={20} />
                    ) : (
                      <Volume2 className="text-white" size={20} />
                    )}
                    <span className="text-sm text-white hidden sm:inline">
                      {isLoadingAudio ? "Loading..." : isPlaying ? "Stop" : "Listen"}
                    </span>
                  </button>
                </div>
                <div className="bg-white/5 rounded-xl p-8 border border-white/10 backdrop-blur-sm">
                  <div className="prose prose-lg prose-invert max-w-none">
                    <div className="text-white leading-8 space-y-6 text-lg font-light">
                      {horoscopeData.horoscope.split(/\n\s*\n/).filter(p => p.trim()).map((paragraph, index) => (
                        <p key={index} className="text-white/95 leading-8 text-justify">
                          {paragraph.trim()}
                        </p>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </div>
  );
}
