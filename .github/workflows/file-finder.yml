name: File Finder

on:
  workflow_dispatch:
    inputs:
      pattern:
        description: 'Filename or wildcard (e.g. Access-Reports.txt, *.csv, Report*.*)'
        required: true
        type: string
        default: 'Access-Reports.txt'
      drives:
        description: 'Comma/space list of drives (e.g. C:,D:). Blank = all local drives.'
        required: false
        type: string
        default: ''
      include_hidden:
        description: 'Include hidden/system items'
        required: true
        type: boolean
        default: true
      size_min_mb:
        description: 'Minimum size (MB). Blank = no minimum.'
        required: false
        type: number
      size_max_mb:
        description: 'Maximum size (MB). Blank = no maximum.'
        required: false
        type: number

jobs:
  find-file:
    runs-on: [self-hosted, windows]
    defaults:
      run:
        shell: powershell
    steps:
      - name: Search filesystem
        run: |
          $ErrorActionPreference = 'Stop'

          $pattern       = "${{ inputs.pattern }}"
          $driveInput    = "${{ inputs.drives }}"
          $includeHidden = "${{ inputs.include_hidden }}" -eq 'true'

          # Build drive list
          if ([string]::IsNullOrWhiteSpace($driveInput)) {
            $drives = (Get-PSDrive -PSProvider FileSystem).Root
          } else {
            $drives = $driveInput -split '[,\s]+' | Where-Object { $_ } | ForEach-Object {
              if ($_ -match '^[A-Za-z]:\\?$') {
                if ($_.EndsWith('\')) { $_ } else { "$_\" }
              } else {
                "$_\"  # normalize
              }
            }
          }

          # Size filters
          $min = ("${{ inputs.size_min_mb }}") -as [double]
          $max = ("${{ inputs.size_max_mb }}") -as [double]
          $minBytes = if ($min) { [int64]([math]::Round($min * 1MB)) } else { $null }
          $maxBytes = if ($max) { [int64]([math]::Round($max * 1MB)) } else { $null }

          Write-Host ("Pattern : {0}" -f $pattern)
          Write-Host ("Drives  : {0}" -f ($drives -join ', '))
          if ($minBytes) { Write-Host ("MinSize : {0} MB" -f $min) }
          if ($maxBytes) { Write-Host ("MaxSize : {0} MB" -f $max) }
          if ($includeHidden) { Write-Host "Including hidden/system items" }

          $results = New-Object System.Collections.Generic.List[Object]

          foreach ($d in $drives) {
            try {
              $args = @{
                Path        = $d
                Recurse     = $true
                ErrorAction = 'SilentlyContinue'
                File        = $true
                Filter      = $pattern
              }
              if ($includeHidden) { $args['Force'] = $true }

              $found = Get-ChildItem @args
              if ($minBytes -or $maxBytes) {
                $found = $found | Where-Object {
                  ($null -eq $minBytes -or $_.Length -ge $minBytes) -and
                  ($null -eq $maxBytes -or $_.Length -le $maxBytes)
                }
              }
              if ($found) { $results.AddRange($found) }
            } catch {
              # IMPORTANT: avoid "$d:" inside a quoted string
              Write-Warning ("Skipped {0} due to access error: {1}" -f $d, $_.Exception.Message)
            }
          }

          $out = Join-Path $env:RUNNER_TEMP 'found-files.csv'
          if ($results.Count -eq 0) {
            Write-Host "No matches found."
            # Emit a header so artifact upload has a file
            "Name,FullName,SizeMB,LastWriteTime" | Out-File -Encoding UTF8 $out
          } else {
            Write-Host ("Found {0} file(s). Writing CSV -> {1}" -f $results.Count, $out)
            $results |
              Select-Object Name, FullName,
                @{n='SizeMB';e={[math]::Round($_.Length/1MB,2)}},
                LastWriteTime |
              Sort-Object SizeMB -Descending |
              Export-Csv -NoTypeInformation -Encoding UTF8 -Path $out

            Write-Host "`nTop 20 largest matches:"
            Import-Csv $out | Select-Object -First 20 | Format-Table -AutoSize
          }

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: file-finder-results
          path: ${{ runner.temp }}/found-files.csv
          if-no-files-found: warn
